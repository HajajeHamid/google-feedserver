Client Tools Downloadable Distribution
======================================

This is a binary distribution of the client tools (FSCT scripts) to work with Google FeedServer.

The Google FeedServer is an open-source Atom Publishing provider based on the
Abdera Framework.

The home of the project is at:
http://code.google.com/p/google-feedserver/ 

This binary distribution includes the following:
-------------------------------------------------
* The FSCT binary jar under 'dist' folder
* The dependant jars under 'lib' folder
* All FSCT scripts under 'scripts' folder

Instructions before running the scripts:
------------------------------------------
The scripts should be used when requests are to be signed with Google ClientLogin authentication and authorization mechanism.

See http://code.google.com/apis/accounts/docs/AuthForInstalledApps.html for Google ClientLogin details 

1. Update the setupEnv.sh (or setupEnv.bat) script with the domain name for the feeds and the other parameters required for authentication and authorization. For Google hosted FeedServer, at a minimum, FSCT_DOMAIN must be set, and generally, to work with the standard feeds, no other changes are necesssary. The following are the user-configurable settings:

  * FSCT_DOMAIN -- Domain name
  * FSCT_USER_NAME -- The user account to be used
  * FSCT_FEED_BASE -- The feed URL
  * SERVICE_NAME -- The name of the service with which the user account is associated.
  * AUTHN_URL_PROTOCOL -- Name of the protocol to use for authentication, either http or https.
  * AUTHN_URL -- The end point that handles authentication and grants authorization tokens to be used with each request. 

Note: The current script has defaults for hosted Google FeedServer. You will have to set the domain and user account

2. Test things are working with the getFeed.sh(bat) script.
  Run this script as follows:

  $> ./getFeed.sh <<feed_name>>
  
  For example './getFeed.sh Gadgets' will fetch the feed that contains all gadgets in the public gadget directory.
  
3. The insertEntry.sh (or insertEntry.bat) script adds a new entry to a feed. 
  The feed entry details come from a file whose path is specified as input in the script : 
  -entryFilePath <path to the file>
  Update this script to refer to the correct file path

  
4. The updateEntry.sh (or updateEntry.bat) script updates an existing feed entry. 
  The feed entry details should come from a file whose path is specified as input in the script : 
  -entryFilePath <path to the file>
  Update this script to refer to the correct file path
  Note: The ID of the feed entry in the file and the input must be same.
  
For more details please refer to the documentation here:
http://code.google.com/p/google-feedserver/wiki/SettingUpADevelopmentEnvironment#Details_of_Each_Script

Managing gadget spec for a domain:
-----------------------------------
Retrieve a specific gadget spec:
  $> ./getEntry.sh <<feed_name>>/<<gadget_name>>
  For example './getEntry.sh Gadgets/hello-world-gadget' will fetch the gadget with the name 'hello-world-gadget' in the public gadget directory.

Upload a new gadget spec:
1. Copy the gadget spec as a xml file and save it in the 'scripts' directory (there is a sample gadget spec: hello.xml)
2. Run the ./insertGadgetSpec.sh script as follows:
   $> ./insertGadgetSpec.sh <<feed_name>> <<gadget_name>> <<gadget_spec_file>>  
   For example './insertGadgetSpec.sh Gadgets hello-world-gadget hello.xml'  will save the gadget spec with the given name. The saved gadget spec will be returned as response.
3. To retrieve the gadget spec mention the gadget name as a parameter to the getEntry.sh script.
   eg: $> ./getEntry.sh Gadgets/hello-world-gadget

Update an existing gadget spec:
1. Save the existing gadget spec as a xml file under the 'scripts' directory. Update it as required
2. Run the ./updateGadgetSpec.sh script as follows:
   $> ./updateGadgetSpec.sh <<feed_name>> <<gadget_name>> <<gadget_spec_file>>  
   For example './updateGadgetSpec.sh Gadgets hello-world-gadget hello.xml'  will update the gadget spec with the given name. The updated gadget spec will be returned as response.



Troubleshooting
---------------

All Platforms

* You may get the following message when running any command:
  log4j:WARN No appenders could be found for logger (org.apache.commons.beanutils.converters.BooleanConverter).
  log4j:WARN Please initialize the log4j system properly.

  * You can safely ignore these warnings, or turn on Abdera debugging: http://code.google.com/p/google-feedserver/wiki/SettingUpADevelopmentEnvironment#Abdera_Debugging

* Not found Exception:

  Exception in thread "main" com.google.feedserver.util.FeedServerClientException: com.google.gdata.util.ResourceNotFoundException: Not Found
  resource not found
  
  A number of things could be wrong here, the domain may not be right, or the entry or feed name may not be spelled correctly. Feed and Entry names are case sensitive.
  
* Unauthorized Exception:

  Exception in thread "main" com.google.feedserver.util.FeedServerClientException: com.google.gdata.util.ServiceForbiddenException: Forbidden
  Unauthorized
  
  * Feeds that have ACLs set on them may prevent reading or writing by the account provided. This error occurs when the ACL check has failed. You may be able to change the ACL for the resource by editing the ACL feed.


Windows

* If you run a command, such as getFeed.bat PrivateGadgetSpec and you get the error: 
  "'java' is not recognized as an internal or external command, operable program or batch file." 
  
  * You need to install java and have java.exe it in your PATH. See http://www3.ntu.edu.sg/home/ehchua/programming/howto/JDK_Howto.html for more info. (You do not need the Java SDK to use FSCT. FSCT requires only the JRE, which is installed on many systems.)

  
  


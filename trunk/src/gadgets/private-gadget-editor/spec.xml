<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs title="Private Gadget Editor" >
  <Require feature="dynamic-height"/>
  <Require feature="setprefs"/>
  <Require feature="tabs"/>
</ModulePrefs>
<Content type="html"><![CDATA[
<style>
#editor {
  width: 100%;
  height: 400px;
}

#button-bar {
  padding: 4px;
}

#gadget-list {
  font-size: 10pt;
}
</style>
<script type="text/javascript" src="http://www.google.com/jsapi"></script>
<script type="text/javascript">
var service = null;
var privateGadgetNames = null;
var nameOfGadgetBeingEdited = '';
var entryOfGadgetBeingEdited = null;
var privateGadgetSpecFeedUrl = 'http://www.google.com/a/feeds/server/g/domain/joonix.net/PrivateGadgetSpec';

// silence console.log if no Firebug installed
if (!window.console) console = {log: function() {}};

function initEditor() {
  initGadgetNameList();
};

function initGadgetNameList() {
  service = new google.gdata.client.FeedServerService('PrivateGadgetSpec', 'GadgetEditor');
  service.setGadgetsAuthentication('SIGNED');
  service.getFeed(privateGadgetSpecFeedUrl, function(response) {
      var entries = response.feed.entry || [];
      showPrivateGadgetNames(setPrivateGadgetNames(entries));
    }, console.log);
};

function setPrivateGadgetNames(entries) {
  privateGadgetNames = [];
  for (var i = 0; i < entries.length; i++) {
    var name = entries[i].id.$t;
    name = name.substring(name.lastIndexOf('/') + 1);
    privateGadgetNames.push(name);
  }
  return privateGadgetNames;
};

function showPrivateGadgetNames() {
  var html = ['<select id="gadget-select" onchange="editSelectedGadget()">'];
  html.push('<option value="">Select to load</option>');
  for (var i = 0; i < privateGadgetNames.length; i++) {
    var privateGadgetName = privateGadgetNames[i];
    html.push('<option ' + (privateGadgetName == nameOfGadgetBeingEdited ? 'selected' : '') + '>', privateGadgetName, '</option>');
  }
  document.getElementById('gadget-list').innerHTML = html.join('');
};

function getSelectedGadgetName() {
  return document.getElementById('gadget-select').value;
};

function editSelectedGadget() {
  var name = getSelectedGadgetName();
  if (name) {
    service.getEntry(privateGadgetSpecFeedUrl + '/' + name, function(response) {
      nameOfGadgetBeingEdited = name;
      entryOfGadgetBeingEdited = response.entry;
      editor.setCode(response.entry.content.entity.specContent);
      editor.editor.syntaxHighlight('init');
    }, console.log);
  } else {
    newGadget();
  }
};

function deleteSelectedGadget() {
  var name = getSelectedGadgetName();
  if (name) {
    service.deleteEntry(privateGadgetSpecFeedUrl + '/' + name, function(response) {
      initEditor();
      newGadget();
    }, console.log);
  } else {
    alert('No gadget selected');
  }
};

function newGadget() {
  nameOfGadgetBeingEdited = '';
  editor.setCode(getGadgetSpecTemplate());
  editor.editor.syntaxHighlight('init');
  showPrivateGadgetNames();
  entryOfGadgetBeingEdited = {xmlns: 'http://www.w3.org/2005/Atom', content: {
      type: 'application/xml', entity: {name: '', specContent: ''}}};
};

function saveGadget() {
  entryOfGadgetBeingEdited.content.entity.specContent = editor.getCode();
  if (nameOfGadgetBeingEdited) {
    service.updateEntry(privateGadgetSpecFeedUrl + '/' + nameOfGadgetBeingEdited, entryOfGadgetBeingEdited, console.log, console.log);
  } else {
    nameOfGadgetBeingEdited = prompt('Please enter name of gadget (e.g. hello.xml)');
    if (nameOfGadgetBeingEdited) {
      entryOfGadgetBeingEdited.content.entity.name = nameOfGadgetBeingEdited;
      service.insertEntry(privateGadgetSpecFeedUrl, entryOfGadgetBeingEdited, function(response) {
        console.log(response);
        privateGadgetNames.push(nameOfGadgetBeingEdited);
        showPrivateGadgetNames();
      }, console.log);
    }
  }
};

function getGadgetSpecTemplate() {
  return document.getElementById('gadget-spec-template').value;
};

google.load('gdata', '1.x', {packages: ['core']});
google.setOnLoadCallback(initEditor);
</script>

<script src="/ig/modules/codepress/codepress.js?ts=092908" type="text/javascript"></script>
<script src="/ig/modules/codepress/codepress_wrapper.js?ts=092908" type="text/javascript"></script>

<script type="text/javascript">
function initCodeEditor() {
  editor.style.height = '400px';
  CodePressWrapper.init();
};

function initGadget() {
  _IG_AdjustIFrameHeight();
};

function init() {
  initCodeEditor();
  initGadget();
};

_IG_RegisterOnloadHandler(init);
</script>

<div id="button-bar">
  <span id="gadget-list">Loading ...</span>
  <button onclick="javascript:saveGadget()">Save</button>
  <button onclick="javascript:deleteSelectedGadget()">Delete</button> |
  <button onclick="javascript:newGadget()">New</button>
</div>

<textarea id="editor" class="codepress gadget"></textarea>

<textarea id="gadget-spec-template" style="display:none">
<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs title="hello world example" />
<Content type="html">
Hello, world!
</Content>
</Module>
</textarea>
]]></Content>
</Module>

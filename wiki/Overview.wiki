= Overview =

Abdera is a framework for creating Atom Publishing servers and clients. The Google !FeedServer is an implementation of Abdera that is easy to use. In the future it may provide some additional Google-centric features.

Google !FeedServer has chosen to implement simple backend data adapters that allow the developer to quickly deploy a feed for an existing data source such as a database. The !FeedSever makes it easy to create these adapters.

== GData and !AtomPub ==

Briefly, GData is a set of extensions to !AtomPub that Google developed while !AtomPub was in the standards process. The !AtomPub spec was never intended to be the "total solution". As an early adopter (from .3 on) Google's business needs could not be met so a few features were added, most notably: Optimistic Concurrency, Queries, Common Elements or "Kinds", and Authentication. GData is the most widely used and documented !AtomPub system and we hope that affinity with it will help spread !AtomPub servers across the internet.

For background, see http://code.google.com/apis/gdata/overview.html#Motivation

Many of the extensions to !AtomPub that Google implemented in GData are going through a standardization process now that !AtomPub is a standard. The Google !FeedServer has made a few choices regarding which of the Google features to support and at this point, supports only those !AtomPub already in Abdera. 

= !FeedServer Extensions to Abdera =

== Authentication ==

Auth is a very important part of of the implementation of the !FeedServer. The Abdera approach to server-side authentication support is to simply depend on the web server to authenticate users and provide a simple API for getting the user information. Then it is up to the developer to design their authorization system. The Google !FeedServer will contain Java servlet filters that handle authentication for Google's !ClientLogin and the OAuth protocol. 

Abdera ships with a client library for authenticating with Google's !ClientLogin as well as WSSE. Google !FeedServer will add client side OAuth support as well. The existing Google GData Client Libraries have some support for !ClientLogin, !AuthSub and OAuth. The !FeedServer will ignore !AuthSub headers but the client authentication should attempt to send OAuth headers via the same methods. See http://code.google.com/apis/gdata/authsub-js.html for a good overview of how the !AuthSub system works with the !JavaScript client. The client works the same when dealing with an OAuth token.

By the way, Abdera also includes server and client-side support for signing and encrypting messages. This message-level encryption is useful in situations where you want non-repudiation or cannot rely on TLS to protect your content.

==Common Data Elements==

Google has created specialized schemas for each service that uses GData (an example is the event kind for calendars) and many of these are part of the GData 'core' and used across many systems. See http://code.google.com/apis/gdata/elements.html for more information. It is generally up to the feed designer to judge where to use extension elements. However, the current trend is to treat the data that is being published in the feed as an opaque blob that is wrapped with the !AtomPub envelope. It may be useful to feed implementers to fully serialize their data into XML and use extension elements but this requires the most work. In the end, we suggest that feed designers try to simplify the representations of their back-end data sources and stick to common elements instead of creating their own schemas.

==Google Client Library Support==

Core aspects of the Google client libraries, http://code.google.com/apis/gdata/clientlibs.html can be used with the Google !FeedServer. One example of this is the !JavaScript client library, http://code.google.com/apis/gdata/client-js.html. Because browsers can submit GET and POST but are unable to issue PUT and DELETE, the !FeedServer includes a method override filter. The JS library sends  a DELETE over POST then server interprets that as a DELETE. 

It also has an optional XD2 filter to support cross-domain access.

However, many of the higher level functions of the client libraries, like dealing with calendar entries, are designed to work specifically with the services on Google.com. To the extent that these services are emulated with google-feedserver, one can expect client library compatibility.

==Queries==

Abdera looks to be heading toward !OpenSearch format and we will work to make this easy to implement in the future.

==Optimistic Concurrency==

We support the Etag system in Abdera/AtomPub and not the GData Optimistic Concurrency system.
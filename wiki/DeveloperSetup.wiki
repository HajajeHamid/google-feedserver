= Setting Up the Development Environment for the Google !FeedServer =

The purpose of this doc is to get acquainted with the development environment and help with builds and source code control and reviews.

== Primary requirements ==

It's assumed you have access to 
http://code.google.com/p/google-feedserver/

To simply check out and build the code you do not need to be added to the project.

  * Java 1.5>
  * Ant 1.6.5 or higher> (if you are using ant version prior to 1.7.0, please copy junit.jar into ${ANT_HOME}/lib dir.)
    * http://ant.apache.org/bindownload.cgi
  * Jetty is included and is the default server.
  * Abdera .3 is included in the source of the !FeedServer so you'll not need to download the binaries.
  
Optional:
  * Apache Tomcat 6
    * http://tomcat.apache.org/download-60.cgi


== Background ==

You may want to look at the Abdera Getting started docs. http://cwiki.apache.org/ABDERA/getting-started.html. The main Abdera docs do not cover getting a server going. That's what this project's aim is.

You can read the [Overview] document for some high level goals of the project.

Jetty is bundled with the !FeedServer and jars are built but there are build tasks for a Tomcat war file as well. Of course, you're free to implement the server any way you like.


=== Check out the source ===

(Don't forget that your svn access password is not the same as your google account password. You can get it on the svn repository info page.)

{{{
svn checkout https://google-feedserver.googlecode.com/svn/trunk/ google-feedserver --username <you>
}}}
  
Googlers use GVN:
(Googlers make sure your gvn is setup correctly before you do this. If it is, you'll know because you won't need to supply a username.)

{{{
gvn checkout https://google-feedserver.googlecode.com/svn/trunk/ google-feedserver
}}}


=== Building with Ant ===

==== Jetty ====

If using Jetty, the server will build and test as checked out. The default target is "all".

==== Tomcat ====

If you want to use Tomcat, you need to create a build.properties file specify your Tomcat directory being set with `${catalina.home}` (the root dir of your Tomcat install.)

(The example below points to a home dir directory called `tomcat`.):

contents of `trunk/build.properties`
{{{
catalina.home=~/tomcat
url.manager=http://localhost:8080/manager
manager.username=admin
manager.password=admin
}}}

Do not add this file to the repository. It's machine-local config.

Add the `admin` user to Tomcat's server.xml.
{{{
<role rolename="manager"/>
<user username="admin" password="admin" roles="manager"/>
}}}

Start Tomcat and verify that it's accepting connections.

====Ant Targets====

{{{
ant all
}}}

`all` runs a `clean` and `jetty`.

{{{
ant tomcat
}}}

This target depends on setting up `build.properties`. If you are using Tomcat and have specified it in your `build.properties`, you'll have to have Tomcat running in order for `deploy` to complete. The sub-tasks are pretty self-explanatory.


{{{
ant test
}}}

`test` runs the unit tests for the feedserver. They were designed to be run after every change made by a developer.


=== Starting the !FeedServer ===

==== Jetty ====

Run `run.sh` to start the server and log to the std out.

You can try the sample feed to check that output is being generated. This feed is not connected to any data source however.

{{{
$ curl localhost:8080/sample | tidy -xml -indent -quiet

<?xml version='1.0' encoding='utf-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:8080/sample</id>
  <title type="text">title for any sample feed</title>
  <updated>2008-01-04T22:27:08.810Z</updated>
  <author>
    <name>rayc</name>
  </author>
</feed>
}}}

==== Tomcat ====

After you've built and deployed, you should have a feedserver.war file in your Tomcat webapps folder. You can go to the Tomcat manager and verify it has been installed.


=== Abdera Debugging ===

Abdera uses log4j but !FeedServer uses `JDK logging`. So if you want to debug the insides of Abdera, you need to put the file `log4j.properties` in `/conf/feedserver/`

{{{
# Set root logger level to DEBUG and its only appender to A1.
log4j.rootLogger=DEBUG, A1

# A1 is set to be a ConsoleAppender.
log4j.appender.A1=org.apache.log4j.ConsoleAppender

# A1 uses PatternLayout.
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n

log4j.logger.com.google=DEBUG
}}}

=== Code Reviews ===

GVN must be setup with a `~/.gvn/projects` folder so that when in a working copy, you don't get prompted for username and password. See the GVN docs for more info. GVN works well when setup properly. It baffles when it's not.

The nature of GVN is that we are doomed to lots of review branches. Keeping track of these can be quite hard. Here's the general approach for working on code.

Follow checkout procedures above to get a working copy of the head of the trunk. Do not actually code in this. It's worthwhile to just have a clean copy of what is head. You may want to keep it around to do diffs against the change branches.

Checkout a working copy for the specific change you want to make:

{{{
gvn checkout https://google-feedserver.googlecode.com/svn/trunk/ buildfilework
}}}


Make your changes in the working copy `buildfilework`. Below is an example of making a change to fix a deploy task in ant. Assuming we've edited build.xml, while in the `buildfilework` dir, make a change with:

{{{
gvn change -c fix-deploy-task
}}}

All changes end up in the `/changes/{username}` section of the repository. What has happened is GVN has branched automatically for you. However, this is considered a 'read-only' branch that only GVN can update.

Send mail to your reviewers letting them know about the changebranch

{{{
gvn mail -c fix-deploy-task
}}}

Fill out the mail form with to and cc. At least one person on the to: line will have to `ack` the change in order to submit it.


==== Snapshotting During Reviews ====

If you need to make a change that someone suggests. Go back to your original working copy (in this example, it's `buildwork`), not the trunk and not the `/changes/` branch and run

{{{
gvn update
gvn snapshot -c fix-deploy-task
}}}

This will make sure you pull in what others have committed and will make another revision available in your change branch. This process is necessary because the only way to get your updates into the branch others are reviewing is through GVN's auto-branching system. 

In addition, as long as reviewers do not specify the revision explicitly, by using the `changename@rev` syntax, like `fix-deploy-task@34` and stick to `changename`, when they review, they should get the most recent version of your change.


==== GVN Review Process ====

GVN allows you to diff review a change as long as you're in a working copy. To review the change we created earlier, change to your unedited head rev trunk working copy and do the following:

{{{
gvn review fix-deploy-task
}}}

This should show the description of the change and a diff. If you've set a graphical diff program like tkdiff, you can use that to go through the file pairs.

===== Setting up GVN with graphical diff=====

`gvn diff` just passes through to subversion so it uses your diff-cmd from `~/.subversion/config`. You may want to update it add a better  differ to it (my personal favorite):

{{{
diff-cmd = kdiff3
}}}

Don't know why, but the special `gvn review` ignores what's in `~/.subversion/config` and uses a setting from `~/.gvn/config`. So add this to that file:

{{{
[external]
diff_command = kdiff3
}}}

==== Non-GVN Review Process ===

These instructions show you how to use a SVN client like TortoiseSVN to do your diffs in the graphical merge tool.

Since the `/changes` section of the repo is changing quite often, I just check the whole thing out in its own working copy:

{{{
gvn checkout https://google-feedserver.googlecode.com/svn/changes/ changes
}}}

You can use this to review changes. Changes can be diff'd by using TortoiseSVN. Go to the root that you want to diff, and select 'tortoisesvn>merge' and then in the merge dialog put the trunk url in the "to:" box. These directories should be the same root (usually /trunk/). Hit 'diff' and it gives all the changes and you can review each individually with the Tortoise differ. Don't hit merge. Basically you have to diff with the trunk and the best way to do that is with the merge tool without doing the merge.


==== GVN Approval ====

If you got the mail to review a change, review it, discuss it and when you're satisfied that it can be submitted, run:

{{{
gvn ack fix-deploy-task
}}}

Then, send a message to the user that you've `ack`'d the change so they know they can submit. There is no automated mail sent and there is no way to auto `ack` via a mail response.

==== The Wiki ====

Checkout the wiki if you are working on that separately.

{{{
gvn checkout https://google-feedserver.googlecode.com/svn/wiki/ google-feedserver-wiki
}}}

You should always leave log messages but the web editing interface to the wiki does not require it. 